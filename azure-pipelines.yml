name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  tags:
    include:
    - '*'
# Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter

jobs:
#  - job: testAndQa
#    displayName: "Testing and quality gate"
#
#    steps:
#      - task: UsePythonVersion@0
#        inputs:
#          versionSpec: '3.9'
#      - script: |
#          pip install .
#          pip install -r test/requirements-test.txt
#          pytest -v
#        displayName: 'Running unit tests'
#      - script: |
#          pip install -r dev/requirements-dev.txt
#          mypy --config-file mypy.ini src/
#        displayName: 'Run MyPy type check'
#      - script: |
#          black src/ test/
#        displayName: 'Run Black style check'
  - job: releaseToPypi
    displayName: "Release to PyPi"
    # Job condition: trigger on any tag
    # condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
      # Keyring packages are needed for the GOOGLE_APPLICATION_CREDENTIALS auth to work
      - script: pip install --upgrade pip twine keyring keyrings.google-artifactregistry-auth
        displayName: 'Install twine keyring'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.9'
      - script: pip install build
        displayName: 'Install Build'

      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download JSON Key for GCR/GAR Service Account'
        inputs:
          # File might be called "gcr-key.json" or "gar-key.json"
          secureFile: 'gcr-key.json'

      - script: |
          echo "Setting env variable GOOGLE_APPLICATION_CREDENTIALS"
          echo "##vso[task.setvariable variable=GOOGLE_APPLICATION_CREDENTIALS]$(gcrJsonKey.secureFilePath)"
        displayName: 'Setting GOOGLE_APPLICATION_CREDENTIALS env variable'

      - script: |
          echo Building wheel and package archive
          pip install twine wheel
          python -m build
          echo Running twine check dist
          twine check dist/*
          echo Push to PyPi
          twine upload dist/* -u __token__ -p $(PYPI_API_TOKEN)
        displayName: 'Run sdist, bdist, twine'
